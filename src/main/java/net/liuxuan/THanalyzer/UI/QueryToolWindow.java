/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.liuxuan.THanalyzer.UI;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import net.liuxuan.THanalyzer.conf.Parameters;
import net.liuxuan.THanalyzer.utils.database.SQLiteHelper;
import net.liuxuan.THanalyzer.utils.StatisticUtil;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;

/**
 *
 * @author Administrator
 */
public class QueryToolWindow extends javax.swing.JFrame {

    Parameters para;
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    SimpleDateFormat sdfd = new SimpleDateFormat("yyyy-MM-dd");
    SQLiteHelper dbhelper;
    Connection conn;
    //查询数据时，显示数据提醒阈值
    private static final int ShowAlarmNum = 3000;

    //绘制曲线
    ChartPanel chartPanel;
    TimeSeries ts_temp = new TimeSeries("温度");
    TimeSeries ts_humidity = new TimeSeries("湿度");
    TimeSeriesCollection timeseriescollection;

    /**
     * Creates new form QueryToolWindow
     */
    public QueryToolWindow(Parameters para) {
        initComponents();
        this.para = para;
        init();
    }

    public void init() {
        //TODO 上次查询记录

        //曲线图初始化
        timeseriescollection = new TimeSeriesCollection(ts_temp);
        timeseriescollection.addSeries(ts_humidity);

        //JFreeChart jfreechart = ChartFactory.createXYLineChart("温湿度曲线", "时间", "值", xyseriesCollection1, PlotOrientation.VERTICAL, true, true, false);
        JFreeChart jfreechart = ChartFactory.createTimeSeriesChart("温湿度曲线", "时间", "值", timeseriescollection, true, true, false);

        XYPlot xyplot = jfreechart.getXYPlot();
        xyplot.setDomainCrosshairVisible(true);
        xyplot.setRangeCrosshairVisible(true);
        //自动移除老的数据
        //ts_temp.setMaximumItemAge(60 * 60 * 24);
        //ts_humidity.setMaximumItemAge(60 * 60 * 24);

        //X 轴对象的获取操作：
        DateAxis xAxis = (DateAxis) xyplot.getDomainAxis();

        //纵坐标设定
        ValueAxis valueaxis = xyplot.getDomainAxis();
        //水平底部列表   
        valueaxis.setLabelFont(new Font("黑体", Font.BOLD, 14));
        //水平底部标题
        valueaxis.setTickLabelFont(new Font("宋体", Font.BOLD, 12));

        //自动设置数据轴数据范围
        valueaxis.setAutoRange(true);
        //数据轴固定数据范围 7days
//                valueaxis.setFixedAutoRange(604800000D);
        valueaxis = xyplot.getRangeAxis();
        valueaxis.setLabelFont(new Font("黑体", Font.BOLD, 14));
        valueaxis.setAutoRange(false);
        valueaxis.setRange(0, 100);

//        valueaxis.setAutoRangeMinimumSize(1d);
//        valueaxis.setLowerBound(0);
        XYLineAndShapeRenderer line0render = (XYLineAndShapeRenderer) xyplot.getRenderer(0);

        line0render.setSeriesPaint(1, Color.GREEN);
        jfreechart.getTitle().setFont(new Font("黑体", Font.BOLD, 20));//设置标题字体
        jfreechart.getLegend().setItemFont(new Font("宋体", Font.ITALIC, 15));

        xyplot.getRenderer(0).setSeriesToolTipGenerator(0, new StandardXYToolTipGenerator("{1}, {2}",
                new SimpleDateFormat("MM-dd HH:mm:ss"),
                new DecimalFormat("0.00")));
        chartPanel = new ChartPanel(jfreechart);

        chartPanel.setSize(jPanel_chart.getWidth(), jPanel_chart.getHeight());
        chartPanel.setPreferredSize(new Dimension(jPanel_chart.getWidth(), jPanel_chart.getHeight()));
        jPanel_chart.add(chartPanel, BorderLayout.CENTER);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        dateChooserJButton_queryTime_start = new net.liuxuan.utils.ui.DateChooserJButton();
        jLabel_queryTime_start = new javax.swing.JLabel();
        jButton_query = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea_output = new javax.swing.JTextArea();
        jLabel_queryTime_end = new javax.swing.JLabel();
        dateChooserJButton_queryTime_end = new net.liuxuan.utils.ui.DateChooserJButton();
        jCheckBox_showDate = new javax.swing.JCheckBox();
        jPanel_chart = new javax.swing.JPanel();
        jCheckBox_dataCompress = new javax.swing.JCheckBox();
        jButton_clear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("温湿度查询");

        dateChooserJButton_queryTime_start.setText("");
        dateChooserJButton_queryTime_start.setToolTipText("点击选择");

        jLabel_queryTime_start.setText("开始时间：");

        jButton_query.setText("查询");
        jButton_query.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_queryActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("结果："));

        jTextArea_output.setColumns(20);
        jTextArea_output.setRows(5);
        jScrollPane1.setViewportView(jTextArea_output);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
        );

        jLabel_queryTime_end.setText("截止时间：");

        dateChooserJButton_queryTime_end.setText("");
        dateChooserJButton_queryTime_end.setToolTipText("点击选择");

        jCheckBox_showDate.setText("列出具体数据");

        javax.swing.GroupLayout jPanel_chartLayout = new javax.swing.GroupLayout(jPanel_chart);
        jPanel_chart.setLayout(jPanel_chartLayout);
        jPanel_chartLayout.setHorizontalGroup(
            jPanel_chartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel_chartLayout.setVerticalGroup(
            jPanel_chartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 543, Short.MAX_VALUE)
        );

        jCheckBox_dataCompress.setSelected(true);
        jCheckBox_dataCompress.setText("数据压缩");
        jCheckBox_dataCompress.setToolTipText("数据压缩可以加快显示速度");
        jCheckBox_dataCompress.setAutoscrolls(true);
        jCheckBox_dataCompress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_dataCompressActionPerformed(evt);
            }
        });

        jButton_clear.setText("清空");
        jButton_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_clearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel_queryTime_start)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateChooserJButton_queryTime_start, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel_queryTime_end)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateChooserJButton_queryTime_end, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox_showDate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox_dataCompress)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton_query)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton_clear)
                                .addGap(0, 245, Short.MAX_VALUE))
                            .addComponent(jPanel_chart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_queryTime_start)
                    .addComponent(dateChooserJButton_queryTime_start, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_queryTime_end)
                    .addComponent(dateChooserJButton_queryTime_end, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox_showDate)
                    .addComponent(jButton_query)
                    .addComponent(jCheckBox_dataCompress)
                    .addComponent(jButton_clear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel_chart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_queryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_queryActionPerformed
        //2015-09-11 15:34:58
        String strStartTime = dateChooserJButton_queryTime_start.getText();
        
        String strEndTime = dateChooserJButton_queryTime_end.getText();
        ShowInfo(strStartTime, strEndTime);


    }//GEN-LAST:event_jButton_queryActionPerformed

    private void jButton_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_clearActionPerformed
        clearCurve();
        
        
    }//GEN-LAST:event_jButton_clearActionPerformed

    private void jCheckBox_dataCompressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_dataCompressActionPerformed
        if(jCheckBox_dataCompress.isSelected() == false){
            JOptionPane.showMessageDialog(this, "取消压缩可能会导致处理时间非常长，请注意！");
        }
    }//GEN-LAST:event_jCheckBox_dataCompressActionPerformed

    /**
     * 清空曲线 
     */
    private void clearCurve(){
        //2015-11-02 
        ts_temp.clear();
        ts_humidity.clear();
        //timeseriescollection.
        
    }
    
    private void ShowInfo(String strStartTime, String strEndTime) {
        //选择的时间
        Date startTime = null;
        Date endTime = null;
        try {
            startTime = sdf.parse(strStartTime);
            endTime = sdf.parse(strEndTime);

            String path = para.getLogSavePath();

            //获取年：
            Calendar cal = Calendar.getInstance();
            cal.setTime(startTime);
            int startyear = cal.get(Calendar.YEAR);
            cal.setTime(endTime);
            int endyear = cal.get(Calendar.YEAR);

            if (endyear != startyear) {
                jTextArea_output.append("当前仅可查询一年内的数据，请选择同一年数据");
            }

            //生成连接字符串
            String connstr = getdbConnStr(startyear);
            
            
            
            dbhelper = new SQLiteHelper(connstr);
            conn = dbhelper.getConnection();

            String querysql = String.format(
                    "SELECT TimeStamp,Temprature,Humidity "
                    + " FROM TempHumLog "
                    + " WHERE TimeStamp <= %d  AND TimeStamp >= %d ", endTime.getTime(), startTime.getTime());
            String querycountsql = String.format(
                    "SELECT count(*)totalCount  "
                    + " FROM TempHumLog "
                    + " WHERE TimeStamp <= %d  AND TimeStamp >= %d ", endTime.getTime(), startTime.getTime());

            System.out.println(querycountsql);
            Statement stat = conn.createStatement();
            //获取总数
            ResultSet rs = stat.executeQuery(querycountsql);
            int rowCount = 0;
            if (rs.next()) {
                rowCount = rs.getInt("totalCount");
            }

            rs = stat.executeQuery(querysql); //查询数据

            Date timeStamp;
            String timeStampStr;
            double tempratue;
            double humidity;
            StatisticUtil statu_temp = new StatisticUtil();
            StatisticUtil statu_humi = new StatisticUtil();

            //清空显示数据框
            jTextArea_output.setText("");
            //大数据询问标志
            boolean askflag = true;

            //总数
            //jTextArea_output.append("行数："+rowCount);
            //跳行数
            int jumpcount = 1;
            
            if (jCheckBox_dataCompress.isSelected() == true) {
                int tmpcompint = para.getCompressnum();
                tmpcompint = rowCount/ tmpcompint > 2000?rowCount/2000:para.getCompressnum();
                        
                
                jumpcount = 1 > (rowCount / tmpcompint) ? 1 : (rowCount / tmpcompint);
                 jTextArea_output.append("压缩率智能确定为："+jumpcount+"\r\n");
                
            }

            while (rs.next()) { //将查询到的数据打印出来
                timeStamp = rs.getDate("TimeStamp");
                timeStampStr = sdf.format(timeStamp);
                tempratue = rs.getInt("Temprature");
                tempratue = tempratue / 100;
                humidity = rs.getInt("Humidity");
                humidity = humidity / 100;
                if (jCheckBox_showDate.isSelected()) {
                    
//                    jTextArea_output.append("[" + timeStampStr + "] " + tempratue + " " + humidity + "\r\n");
                    jTextArea_output.append(String.format("[%s] %2.2f %2.2f%n", timeStampStr,tempratue,humidity));
                }

                ts_temp.setNotify(false);
                ts_humidity.setNotify(false);
                if (rs.getRow() % jumpcount == 0) {
                    ts_temp.addOrUpdate(new Second(timeStamp), tempratue);
                    ts_humidity.addOrUpdate(new Second(timeStamp), humidity);
//                    System.out.println("add");
                }

                statu_temp.put(tempratue);
                statu_humi.put(humidity);
                if (statu_temp.getTimes() > ShowAlarmNum && jCheckBox_showDate.isSelected() && askflag == true) {
                    //数据量超过3000
                    int opt = JOptionPane.showConfirmDialog(this, "数据量超过3000,继续显示可能影响速度，建议停止显示具体数据", "数量报警", JOptionPane.YES_NO_OPTION);
                    //System.out.println(opt);
                    if (opt == JOptionPane.YES_OPTION) {
                        jCheckBox_showDate.setSelected(false);
                    } else {
                        askflag = false;//仅询问一次
                    }

                }
            }
            ts_temp.setNotify(true);
            ts_humidity.setNotify(true);

            if (statu_temp.getTimes() > 0) {
                jTextArea_output.append("温度统计：" + statu_temp + "\r\n");
                jTextArea_output.append("湿度统计：" + statu_humi);
            } else {
                jTextArea_output.append("所选时间段内无数据\r\n");
            }
            rs.close();

        } catch (SQLException ex) {
            Logger.getLogger(QueryToolWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(QueryToolWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * 获得sqlite 链接字符串
     *
     * @return
     */
    private String getdbConnStr(int year) {
        //确定数据库
        String dbpath = "jdbc:sqlite:" + para.getLogSavePath() + File.separator + year + "Temperaure.db";
        return dbpath;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private net.liuxuan.utils.ui.DateChooserJButton dateChooserJButton_queryTime_end;
    private net.liuxuan.utils.ui.DateChooserJButton dateChooserJButton_queryTime_start;
    private javax.swing.JButton jButton_clear;
    private javax.swing.JButton jButton_query;
    private javax.swing.JCheckBox jCheckBox_dataCompress;
    private javax.swing.JCheckBox jCheckBox_showDate;
    private javax.swing.JLabel jLabel_queryTime_end;
    private javax.swing.JLabel jLabel_queryTime_start;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel_chart;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea_output;
    // End of variables declaration//GEN-END:variables
}
