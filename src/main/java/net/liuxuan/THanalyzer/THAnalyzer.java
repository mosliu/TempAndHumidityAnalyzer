/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.liuxuan.THanalyzer;

import net.liuxuan.THanalyzer.UI.CommTypeSettingWindow;
import net.liuxuan.THanalyzer.UI.CommSettingWindow;
import com.serotonin.modbus4j.ModbusMaster;
import com.serotonin.modbus4j.exception.ModbusInitException;
import com.serotonin.modbus4j.exception.ModbusTransportException;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import net.liuxuan.THanalyzer.UI.AboutDialog;
import net.liuxuan.THanalyzer.UI.QueryToolWindow;
import net.liuxuan.THanalyzer.UI.SystemSettingWindow;
import net.liuxuan.THanalyzer.conf.CONST;
import net.liuxuan.THanalyzer.conf.Parameters;
import net.liuxuan.THanalyzer.serial.mina.Connector.ConnectorHelper;
import net.liuxuan.THanalyzer.serial.mina.Connector.RS232Connector;
import net.liuxuan.THanalyzer.serial.mina.T1.ReceiveMsgCallback;
import net.liuxuan.THanalyzer.serial.mina.T1.T1Hanler;
import net.liuxuan.THanalyzer.serial.mina.T1.T1ProtocolCodecFactory;
import net.liuxuan.THanalyzer.serial.modbus.ModbusHelper;
import net.liuxuan.THanalyzer.serial.modbus.SerialModbus;
import net.liuxuan.THanalyzer.utils.database.SQLiteHelper;
import net.liuxuan.THanalyzer.utils.StatisticUtil;
import net.liuxuan.utils.FilePlus;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.transport.serial.SerialAddress;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.labels.StandardXYToolTipGenerator;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.slf4j.Logger;

/**
 *
 * @version 20150901
 * @author Liuxuan Moses
 */
public class THAnalyzer extends javax.swing.JFrame {

    private static final Logger logger = org.slf4j.LoggerFactory.getLogger(THAnalyzer.class.getName());
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

    //private static SerialWrapper serialport;
    private Parameters para;

    //db
    SQLiteHelper dbhelper;
    Connection conn;

    //Serial - modbus
    ModbusMaster master;
    Timer timer = null;

    //Serial - mina
    RS232Connector rs232connector;

    //绘制曲线
    ChartPanel chartPanel;
    TimeSeries ts_temp = new TimeSeries("温度");
    TimeSeries ts_humidity = new TimeSeries("湿度");
    TimeSeriesCollection timeseriescollection;

    StatisticUtil statu_temp = new StatisticUtil();
    StatisticUtil statu_humi = new StatisticUtil();

    //全局
    double tempratue;
    double humidity;
    //记录上次时间
    private static Long lasttime = 0L;
    private static Long lastShowcurveTime = 0L;

    ;

    /**
     * Creates new form THAnalyzer
     */
    public THAnalyzer() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton_Start = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel_status1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel_status2 = new javax.swing.JLabel();
        jButton_switch = new javax.swing.JButton();
        jPanel_bottom = new javax.swing.JPanel();
        jPanel_shownum = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel_showTemp = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel_ShowHumidity = new javax.swing.JLabel();
        jPanel_chart = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        QueryMenu = new javax.swing.JMenu();
        QueryMenuItem = new javax.swing.JMenuItem();
        settingMenu = new javax.swing.JMenu();
        serialSetMenuItem = new javax.swing.JMenuItem();
        commTypeMenuItem = new javax.swing.JMenuItem();
        SystemSettingMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("温湿度数据采集系统");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jToggleButton_Start.setText("开始");
        jToggleButton_Start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton_StartActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel_status1.setText("System Ready");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel_status2.setText("...");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel_status1, javax.swing.GroupLayout.PREFERRED_SIZE, 648, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_status2, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel_status1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel_status2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jButton_switch.setText("图表/数显");
        jButton_switch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_switchActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel3.setPreferredSize(new java.awt.Dimension(418, 500));

        jLabel1.setFont(new java.awt.Font("微软雅黑", 0, 20)); // NOI18N
        jLabel1.setText("温度：");

        jLabel_showTemp.setFont(new java.awt.Font("微软雅黑", 1, 120)); // NOI18N
        jLabel_showTemp.setForeground(new java.awt.Color(0, 0, 255));
        jLabel_showTemp.setText("- -");
        jLabel_showTemp.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                jLabel_showTempComponentResized(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_showTemp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_showTemp, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setPreferredSize(new java.awt.Dimension(418, 500));

        jLabel2.setFont(new java.awt.Font("微软雅黑", 0, 20)); // NOI18N
        jLabel2.setText("湿度：");

        jLabel_ShowHumidity.setFont(new java.awt.Font("微软雅黑", 1, 120)); // NOI18N
        jLabel_ShowHumidity.setForeground(new java.awt.Color(0, 255, 51));
        jLabel_ShowHumidity.setText("- -");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel_ShowHumidity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel_ShowHumidity, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel_shownumLayout = new javax.swing.GroupLayout(jPanel_shownum);
        jPanel_shownum.setLayout(jPanel_shownumLayout);
        jPanel_shownumLayout.setHorizontalGroup(
            jPanel_shownumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_shownumLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel_shownumLayout.setVerticalGroup(
            jPanel_shownumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_shownumLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_shownumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel_chart.setPreferredSize(new java.awt.Dimension(823, 454));

        javax.swing.GroupLayout jPanel_chartLayout = new javax.swing.GroupLayout(jPanel_chart);
        jPanel_chart.setLayout(jPanel_chartLayout);
        jPanel_chartLayout.setHorizontalGroup(
            jPanel_chartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 823, Short.MAX_VALUE)
        );
        jPanel_chartLayout.setVerticalGroup(
            jPanel_chartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 454, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel_bottomLayout = new javax.swing.GroupLayout(jPanel_bottom);
        jPanel_bottom.setLayout(jPanel_bottomLayout);
        jPanel_bottomLayout.setHorizontalGroup(
            jPanel_bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_bottomLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel_shownum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel_bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel_bottomLayout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jPanel_chart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(10, 10, 10)))
        );
        jPanel_bottomLayout.setVerticalGroup(
            jPanel_bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_bottomLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel_shownum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel_bottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel_bottomLayout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jPanel_chart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(10, 10, 10)))
        );

        menuBar.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");
        fileMenu.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N

        openMenuItem.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N
        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.setEnabled(false);
        fileMenu.add(openMenuItem);

        saveMenuItem.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N
        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.setEnabled(false);
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N
        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.setEnabled(false);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        QueryMenu.setText("查询");
        QueryMenu.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N

        QueryMenuItem.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N
        QueryMenuItem.setText("查询数值");
        QueryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QueryMenuItemActionPerformed(evt);
            }
        });
        QueryMenu.add(QueryMenuItem);

        menuBar.add(QueryMenu);

        settingMenu.setMnemonic('e');
        settingMenu.setText(" 设置 ");
        settingMenu.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N

        serialSetMenuItem.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N
        serialSetMenuItem.setMnemonic('t');
        serialSetMenuItem.setText("串口设置");
        serialSetMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serialSetMenuItemActionPerformed(evt);
            }
        });
        settingMenu.add(serialSetMenuItem);

        commTypeMenuItem.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N
        commTypeMenuItem.setMnemonic('y');
        commTypeMenuItem.setText("通讯器件");
        commTypeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commTypeMenuItemActionPerformed(evt);
            }
        });
        settingMenu.add(commTypeMenuItem);

        SystemSettingMenuItem.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N
        SystemSettingMenuItem.setMnemonic('p');
        SystemSettingMenuItem.setText("系统参数");
        SystemSettingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SystemSettingMenuItemActionPerformed(evt);
            }
        });
        settingMenu.add(SystemSettingMenuItem);

        menuBar.add(settingMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText(" 关于 ");
        helpMenu.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N

        contentsMenuItem.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N
        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        contentsMenuItem.setEnabled(false);
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setFont(new java.awt.Font("宋体", 0, 12)); // NOI18N
        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToggleButton_Start)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_switch)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel_bottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel_bottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton_switch, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jToggleButton_Start, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void init() {
        setLocationRelativeTo(null);

        logger.info("Software Started ");
        if (para == null) {
            para = new Parameters();
            para.reload();
        }

        master = ModbusHelper.getModbusMaster(para);
        //检查记录文件夹
        File logFile = new File(para.getLogSavePath());
        if (logFile.exists()) {
            //目录存在
        } else {
            logger.debug("create log directory {}.", para.getLogSavePath());
            logFile.mkdirs();
        }

        //db初始化
        
        //dbhelper = new SQLiteHelper(getdbConnStr());
        dbhelper = new SQLiteHelper(SQLiteHelper.getThisYear(), para.getLogSavePath());
        dbhelper.PrepareTable();

        //曲线图初始化
        timeseriescollection = new TimeSeriesCollection(ts_temp);
        timeseriescollection.addSeries(ts_humidity);

        //JFreeChart jfreechart = ChartFactory.createXYLineChart("温湿度曲线", "时间", "值", xyseriesCollection1, PlotOrientation.VERTICAL, true, true, false);
        JFreeChart jfreechart = ChartFactory.createTimeSeriesChart("温湿度曲线", "时间", "值", timeseriescollection, true, true, false);

        XYPlot xyplot = jfreechart.getXYPlot();
        xyplot.setDomainCrosshairVisible(true);
        xyplot.setRangeCrosshairVisible(true);
        //自动移除老的数据
        ts_temp.setMaximumItemAge(para.getShowChartTime());
        ts_humidity.setMaximumItemAge(para.getShowChartTime());

        //X 轴对象的获取操作：
        DateAxis xAxis = (DateAxis) xyplot.getDomainAxis();

        //纵坐标设定
        ValueAxis valueaxis = xyplot.getDomainAxis();
        //水平底部列表   
        valueaxis.setLabelFont(new Font("黑体", Font.BOLD, 14));
        //水平底部标题
        valueaxis.setTickLabelFont(new Font("宋体", Font.BOLD, 12));

        //自动设置数据轴数据范围
        valueaxis.setAutoRange(true);
        //数据轴固定数据范围 7days
//                valueaxis.setFixedAutoRange(604800000D);
        valueaxis = xyplot.getRangeAxis();
        valueaxis.setLabelFont(new Font("黑体", Font.BOLD, 14));
        valueaxis.setAutoRange(false);
        valueaxis.setRange(0, 100);

//        valueaxis.setAutoRangeMinimumSize(1d);
//        valueaxis.setLowerBound(0);
        XYLineAndShapeRenderer line0render = (XYLineAndShapeRenderer) xyplot.getRenderer(0);

        line0render.setSeriesPaint(3, Color.ORANGE);
        jfreechart.getTitle().setFont(new Font("黑体", Font.BOLD, 20));//设置标题字体
        jfreechart.getLegend().setItemFont(new Font("宋体", Font.ITALIC, 15));

        xyplot.getRenderer(0).setSeriesToolTipGenerator(0, new StandardXYToolTipGenerator("{1}, {2}",
                new SimpleDateFormat("MM-dd HH:mm:ss"),
                new DecimalFormat("0.00")));
        chartPanel = new ChartPanel(jfreechart);

        chartPanel.setSize(823, 454);
        chartPanel.setPreferredSize(new Dimension(823, 454));
        jPanel_chart.add(chartPanel, BorderLayout.CENTER);

        jPanel_shownum.setVisible(true);
        jPanel_chart.setVisible(false);
    }


    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed


    private void serialSetMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serialSetMenuItemActionPerformed

        if (jToggleButton_Start.isSelected()) {
            JOptionPane.showConfirmDialog(this, "数据记录运行中，请停止后再修改配置", "运行中告警", JOptionPane.OK_CANCEL_OPTION);
        }

        //无则重建
        if (para.getSerialPort() == null) {
            para.setSerialPort(new SerialModbus());
        }

        CommSettingWindow csw = new CommSettingWindow(this, true, para);
        csw.setVisible(true);

        csw.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
//        csw.setLocationRelativeTo(getOwner());

    }//GEN-LAST:event_serialSetMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed

        AboutDialog about = new AboutDialog(this, true);

        about.setVisible(true);

        about.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        about.setLocationRelativeTo(getOwner());


    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void commTypeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commTypeMenuItemActionPerformed

        if (jToggleButton_Start.isSelected()) {
            JOptionPane.showConfirmDialog(this, "数据记录运行中，请停止后再修改配置", "运行中告警", JOptionPane.OK_CANCEL_OPTION);
        }

        CommTypeSettingWindow ctsw = new CommTypeSettingWindow(this, true, para);
        ctsw.setVisible(true);

        ctsw.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        ctsw.setLocationRelativeTo(getOwner());
    }//GEN-LAST:event_commTypeMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        para.save();
    }//GEN-LAST:event_formWindowClosing

    private void jToggleButton_StartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton_StartActionPerformed
        if (para.getCommType() == CONST.COMMTYPE_MODBUS) {
//            System.out.println("COMMTYPE_MODBUS");
            ToggleStartModbusLogger();
        } else if (para.getCommType() == CONST.COMMTYPE_T1L) {
//            System.out.println("COMMTYPE_T1L");
            ToggleStartT1Logger();
        } else {

        }
    }//GEN-LAST:event_jToggleButton_StartActionPerformed

    private void ToggleStartModbusLogger() {
        if (timer == null) {
            timer = new Timer();
        }
        if (jToggleButton_Start.isSelected()) {
            // 创建ModbusMaster实例
            master = ModbusHelper.getModbusMaster(para);
//            master = ModbusHelper.getModbusMaster(paras);
            //final Timer timer = new Timer();
            timer = new Timer();
            // 初始化
            try {
                
                master.init();
                 } catch (ModbusInitException e) {
                e.printStackTrace();
            }
                logger.info("开始Modbus通讯及记录");
                timer.scheduleAtFixedRate(new TimerTask() {
                    public void run() {
                        try {
                            jLabel_status1.setText("与设备通讯中");
                            readInputRegistersTest(0, 2);
                        } catch (ModbusTransportException ex) {
                            //超时通讯不上，暂停
                            if (ex.getCause().getClass().getCanonicalName().equals("com.serotonin.messaging.TimeoutException")) {
                                timer.cancel();
                                timer.purge();

                                if (master.isConnected()) {
                                    master.destroy();

                                }
                                jToggleButton_Start.setText("开始");
                                jToggleButton_Start.setSelected(false);
                                jLabel_status1.setText("Modbus通讯超时，请检查联系与配置");
                                logger.info("通讯失败 ");
                            }
                        }
                    }
                }, 0, para.getInterval());
//                readInputRegistersTest(master, paras.getModbusinfo().getSlaveAddress(), 0, 2);

           
            jToggleButton_Start.setText("停止");
        } else {
            master.destroy();
            
            timer.cancel();
            timer.purge();
            jLabel_status1.setText("停止通讯");
            logger.info("停止Modbus通讯及记录");
            jToggleButton_Start.setText("开始");
        }
    }

    private void ToggleStartT1Logger() {
        if (timer == null) {
            timer = new Timer();
        }

        if (jToggleButton_Start.isSelected()) {
            // 创建 T1  rs232connector 实例
            SerialAddress portAddress = ConnectorHelper.convertSerialWrapper2SerialAddress(para.getSerialPort());
            T1Hanler handler = new T1Hanler(new ReceiveMsgCallback() {

                @Override
                public void onReceiveMsgEnd(short[] list) {
                    parseTempValue(list);
                }
            });

            if (rs232connector != null) {
                rs232connector.endListen();
            }

            rs232connector = RS232Connector.getInstance(handler, portAddress);
            rs232connector.addFilter("logger", new LoggingFilter());
            rs232connector.addFilter("codec", new ProtocolCodecFilter(
                    new T1ProtocolCodecFactory())); // 设置编码过滤器

            rs232connector.startListen();
            logger.info("开始T1通讯及记录");
            jToggleButton_Start.setText("停止");
        } else {

            rs232connector.endListen();
            jLabel_status1.setText("停止通讯");
            logger.info("停止T1通讯及记录");
            jToggleButton_Start.setText("开始");
        }
    }

    private void SystemSettingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SystemSettingMenuItemActionPerformed
        SystemSettingWindow ssw = new SystemSettingWindow(this, true, para);
        ssw.setVisible(true);
        ssw.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        //ssw.setLocation(this.getWidth()/2 - ssw.getWidth()/2, this.getHeight()/2 - ssw.getHeight()/2);
//        ssw.setLocationRelativeTo(getOwner());
        ssw.setLocationRelativeTo(null);

    }//GEN-LAST:event_SystemSettingMenuItemActionPerformed

    private void jButton_switchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_switchActionPerformed
        jPanel_shownum.setVisible(!jPanel_shownum.isVisible());
        jPanel_chart.setVisible(!jPanel_chart.isVisible());
    }//GEN-LAST:event_jButton_switchActionPerformed

    private void jLabel_showTempComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jLabel_showTempComponentResized
        changeFontSize();
    }//GEN-LAST:event_jLabel_showTempComponentResized

    private void QueryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QueryMenuItemActionPerformed
        QueryToolWindow qtw = new QueryToolWindow(para);
        qtw.setVisible(true);
        qtw.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        qtw.setLocationRelativeTo(getOwner());

    }//GEN-LAST:event_QueryMenuItemActionPerformed

    public void changeFontSize() {

        int width = jLabel_showTemp.getWidth();
        int height = jLabel_showTemp.getHeight();
//        System.out.println(width + " " + height);
//        System.out.println(Math.sqrt(width * width + height * height));

        double k = Math.min(width, height);
        Double k1 = Math.ceil(1.414 * k / 4.6);
        int size = k1.intValue();

        jLabel_showTemp.setFont(new java.awt.Font("微软雅黑", 1, size));
        jLabel_ShowHumidity.setFont(new java.awt.Font("微软雅黑", 1, size));
    }

    /**
     * 处理得到的数据
     *
     * @param list
     */
    private void parseTempValue(short[] list) {

        Date d = new Date();
        showTempValue(list, d);
        if (reachInterval()) {
            showTempValueChart(list, d);

            SaveTempValueLog(list, d);

            //选择了就记录文本文件
            if (para.getIsSaveFile()) {
                SaveTempValueLogF(list, d);
            }
        }
    }

    private boolean reachInterval() {
        Long thisTime = System.currentTimeMillis();
        if(thisTime-lasttime> para.getInterval()){
            lasttime = System.currentTimeMillis();
            return true;
        }else{
            return false;
        }
    }

    /**
     * 显示温湿度
     *
     * @param list
     */
    private void showTempValue(short[] list, Date dt) {
        //        jLabel_showTemp.setText(list[0] / 100 + "." + list[0] % 100);
        jLabel_showTemp.setText(String.format("<html>%02d.%02d<br/><center>℃</center></html>", list[0] / 100, list[0] % 100));

        //        jLabel_ShowHumidity.setText(list[1] / 100 + "." + list[1] % 100);
        jLabel_ShowHumidity.setText(String.format("<html>%02d.%02d<br/><center>%%</center></html>", list[1] / 100, list[1] % 100));
        tempratue = list[0];
        tempratue = tempratue / 100;
        humidity = list[1];
        humidity = humidity / 100;
        statu_humi.put(humidity);
        statu_temp.put(tempratue);

        jLabel_status2.setText(String.format("MAX:%2.2f℃,%2.2f%%,MIN:%2.2f℃,%2.2f%%", statu_temp.getMax(), statu_humi.getMax(), statu_temp.getMin(), statu_humi.getMin()));

    }

    /**
     * 显示温湿度
     *
     * @param list
     */
    private void showTempValueChart(short[] list, Date d) {
        double temp = ((double) list[0]) / 100;
        double humi = ((double) list[1]) / 100;
        if (System.currentTimeMillis() > lastShowcurveTime + 60000) {
            //满足一分钟更新
            ts_temp.setNotify(true);
            ts_humidity.setNotify(true);
            lastShowcurveTime = System.currentTimeMillis();
        }else{
            ts_temp.setNotify(false);
            ts_humidity.setNotify(false);
        }
            
        ts_temp.addOrUpdate(new Second(d), temp);
        ts_humidity.addOrUpdate(new Second(d), humi);

    }

    /**
     * 将数据记录到数据库<br/>
     * 低效、但相对于每秒一次足够了
     *
     * @param list
     */
    private void SaveTempValueLog(short[] list, Date d) {
        try {
            conn = dbhelper.getConnection();
//            Date d = new Date();
            String insertsql = String.format("insert into TempHumLog values(NULL,'%d','%04d','%04d');", d.getTime(), list[0], list[1]);
//            System.out.println(insertsql);
//            long start = System.currentTimeMillis();
            Statement stat = conn.createStatement();
            stat.executeUpdate(insertsql);
//            System.out.println("用时" + (System.currentTimeMillis() - start));
        } catch (SQLException ex) {
//            java.util.logging.Logger.getLogger(THAnalyzer.class.getName()).log(Level.SEVERE, null, ex);
            logger.error("ERROR:{}", ex);
        }
    }

    /**
     * 将数据记录到文件<br/>
     * 低效、但相对于每秒一次足够了
     *
     * @param list
     */
    private void SaveTempValueLogF(short[] list, Date d) {
        File logFile = new File(para.getLogSavePath());
        if (logFile.exists()) {
            //目录存在
        } else {
            logFile.mkdirs();
        }
        //Date d = new Date();

        //建立文件，格式为TempLog[yyyy-MM-dd].log  无中括号
        String filename = String.format("TempLog%tF.log", d);
//        System.out.println(String.format("TempLog%tF.log", new Date()));
//        logFile = new File(paras.getLogSavePath() + "/" + filename);
        //System.out.println(logFile.getAbsolutePath());
        String logstr = String.format("%tT %04d %04d%n", d, list[0], list[1]);
        FilePlus.appendText(para.getLogSavePath(), filename, logstr);
    }

    /**
     * 读输入寄存器上的内容
     *
     * @param slaveId 从站地址
     * @param start 起始地址的偏移量
     * @param len 待读寄存器的个数
     */
    private void readInputRegistersTest(int start, int len) throws ModbusTransportException {
        short[] list = ModbusHelper.readInputRegistersTest(master, para.getModbusinfo().getSlaveAddress(), start, len);
//        short[] list = response.getShortData();
        //滤除小于0的数据
        if (list[0] < 0 || list[1] < 0) {
            return;
        }
        parseTempValue(list);
//                System.out.println("");
    }

    /**
     * 获得sqlite 链接字符串
     *
     * @return
     */
    private String getdbConnStr() {
        //确定数据库
        String dbpath = "jdbc:sqlite:" + para.getLogSavePath() + File.separator + String.format("%tC%<tyTemperaure.db", new Date());
        return dbpath;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        logger.debug("debug");
//        logger.info("info");
//        logger.warn("warn");
//        logger.error("error");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {

            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");

        } catch (ClassNotFoundException ex) {
            logger.error(ex.getLocalizedMessage());
        } catch (InstantiationException ex) {
            logger.error(ex.getLocalizedMessage());
        } catch (IllegalAccessException ex) {
            logger.error(ex.getLocalizedMessage());
        } catch (UnsupportedLookAndFeelException ex) {
            logger.error(ex.getLocalizedMessage());
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new THAnalyzer().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu QueryMenu;
    private javax.swing.JMenuItem QueryMenuItem;
    private javax.swing.JMenuItem SystemSettingMenuItem;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem commTypeMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton_switch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel_ShowHumidity;
    private javax.swing.JLabel jLabel_showTemp;
    private javax.swing.JLabel jLabel_status1;
    private javax.swing.JLabel jLabel_status2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel_bottom;
    private javax.swing.JPanel jPanel_chart;
    private javax.swing.JPanel jPanel_shownum;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToggleButton jToggleButton_Start;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem serialSetMenuItem;
    private javax.swing.JMenu settingMenu;
    // End of variables declaration//GEN-END:variables

}
